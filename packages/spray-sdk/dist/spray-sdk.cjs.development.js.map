{"version":3,"file":"spray-sdk.cjs.development.js","sources":["../src/constants/index.ts","../src/entities/Pool.ts","../src/enums/Fee.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/entities/ConstantProductPool.ts","../src/functions/convertPoolOrPairtoRPool.ts","../src/functions/calcTokenPrices.ts","../src/functions/computeHybridLiquidity.ts","../src/functions/computeHybridPoolAddress.ts","../src/functions/convertTinesSingleRouteToLegacyRoute.ts","../src/functions/findMultiRouteExactIn.ts","../src/functions/findMultiRouteExactOut.ts","../src/functions/findSingleRouteExactIn.ts","../src/functions/findSingleRouteExactOut.ts","../src/enums/PoolState.ts","../src/enums/RouteType.ts","../src/entities/HybridPool.ts","../src/entities/Trade.ts"],"sourcesContent":["import { JSBI, ChainId, AddressMap } from '@champagneswap/core-sdk'\n\nexport const A_PRECISION = JSBI.BigInt(100)\nexport const MAX_FEE = JSBI.BigInt(10000)\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.KOVAN]: '0x473Ef9B3e01E34b242b13F875b123E53208C88FA',\n  [ChainId.RINKEBY]: '0x473Ef9B3e01E34b242b13F875b123E53208C88FA',\n}\n","import { ChainId, CurrencyAmount, Token } from '@champagneswap/core-sdk'\nimport { Fee } from '../enums/Fee'\n\nexport abstract class Pool {\n  public abstract readonly liquidityToken: Token\n\n  public abstract get chainId(): ChainId\n\n  public abstract get fee(): Fee\n\n  public abstract get assets(): Token[]\n\n  public abstract get reserves(): CurrencyAmount<Token>[]\n\n  public abstract getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token>\n\n  public abstract getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token>\n\n  public abstract involvesToken(token: Token): boolean\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  LOW = 1,\n  MEDIUM = 5,\n  DEFAULT = 30,\n  HIGH = 100,\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress,\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      ),\n    ]\n  )\n","import { ChainId, ChainKey, Token } from '@champagneswap/core-sdk'\n\nimport { Fee } from '../enums/Fee'\nimport EXPORTS from '@sushiswap/trident/exports/all.json'\nimport constantProductPoolArtifact from '@sushiswap/trident/artifacts/contracts/pool/ConstantProductPool.sol/ConstantProductPool.json'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: constantProductPoolArtifact.bytecode,\n    deployData,\n    masterDeployerAddress: EXPORTS[ChainId.KOVAN][ChainKey.KOVAN].contracts.MasterDeployer.address,\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import {\n  ChainId,\n  ChainKey,\n  CurrencyAmount,\n  InsufficientInputAmountError,\n  InsufficientReservesError,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  Price,\n  Token,\n  ZERO,\n  sqrt,\n} from '@champagneswap/core-sdk'\nimport { Fee } from '../enums/Fee'\nimport JSBI from 'jsbi'\nimport { MAX_FEE } from '../constants'\nimport EXPORTS from '@sushiswap/trident/exports/all.json'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './Pool'\n\nexport class ConstantProductPool implements Pool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  public readonly twap: boolean\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = Fee.DEFAULT, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: EXPORTS[ChainId.KOVAN][ChainKey.KOVAN].contracts.ConstantProductPoolFactory.address,\n      tokenA,\n      tokenB,\n      fee,\n      twap,\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = Fee.DEFAULT,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.twap = twap\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public get assets(): Token[] {\n    return [this.tokenAmounts[0].currency, this.tokenAmounts[1].currency]\n  }\n\n  public get reserves(): CurrencyAmount<Token>[] {\n    return [this.reserve0, this.reserve1]\n  }\n\n  public get kLast(): JSBI {\n    return sqrt(this.reserve0.multiply(this.reserve1).quotient)\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, JSBI.subtract(MAX_FEE, JSBI.BigInt(this.fee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, MAX_FEE), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.fee, this.twap),\n    ]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), MAX_FEE)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      JSBI.subtract(MAX_FEE, JSBI.BigInt(this.fee))\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.fee, this.twap),\n    ]\n  }\n\n  public getNonOptimalMintFee(amount0: JSBI, amount1: JSBI, reserve0: JSBI, reserve1: JSBI): [JSBI, JSBI] {\n    if (JSBI.equal(reserve0, ZERO) || JSBI.equal(reserve1, ZERO)) {\n      return [ZERO, ZERO]\n    }\n    const amount1Optimal = JSBI.divide(JSBI.multiply(amount0, reserve1), reserve0)\n\n    if (JSBI.lessThanOrEqual(amount1Optimal, amount1)) {\n      return [\n        ZERO,\n        JSBI.divide(\n          JSBI.multiply(JSBI.BigInt(this.fee), JSBI.subtract(amount1, amount1Optimal)),\n          JSBI.multiply(JSBI.BigInt(2), JSBI.BigInt(10000))\n        ),\n      ]\n    } else {\n      const amount0Optimal = JSBI.divide(JSBI.multiply(amount1, reserve0), reserve1)\n      return [\n        JSBI.divide(\n          JSBI.multiply(JSBI.BigInt(this.fee), JSBI.subtract(amount0, amount0Optimal)),\n          JSBI.multiply(JSBI.BigInt(2), JSBI.BigInt(10000))\n        ),\n        ZERO,\n      ]\n    }\n  }\n\n  public getMintFee(reserve0: JSBI, reserve1: JSBI, totalSupply: JSBI): JSBI {\n    console.log('getMintFee', {\n      kLast: this.kLast.toString(),\n      computed: sqrt(JSBI.multiply(reserve0, reserve1)).toString(),\n      totalSupply: totalSupply.toString(),\n    })\n\n    if (JSBI.notEqual(this.kLast, ZERO)) {\n      const computed = sqrt(JSBI.multiply(reserve0, reserve1))\n      if (JSBI.greaterThan(computed, this.kLast)) {\n        const liquidity = JSBI.divide(\n          JSBI.divide(\n            JSBI.multiply(JSBI.multiply(totalSupply, JSBI.subtract(computed, this.kLast)), JSBI.BigInt(5)),\n            computed\n          ),\n          JSBI.BigInt(10000)\n        )\n\n        console.log({\n          kLast: this.kLast.toString(),\n          computed: computed.toString(),\n          liquidity: liquidity.toString(),\n        })\n\n        if (JSBI.notEqual(liquidity, ZERO)) {\n          return liquidity\n        }\n      }\n    }\n\n    return ZERO\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n\n    // Expected balances after minting\n    const balance0 = JSBI.add(tokenAmounts[0].quotient, this.reserve0.quotient)\n    const balance1 = JSBI.add(tokenAmounts[1].quotient, this.reserve1.quotient)\n    const computed = sqrt(JSBI.multiply(balance0, balance1))\n\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(computed, MINIMUM_LIQUIDITY)\n    } else {\n\n      const [fee0, fee1] = this.getNonOptimalMintFee(\n        tokenAmounts[0].quotient,\n        tokenAmounts[1].quotient,\n        this.reserve0.quotient,\n        this.reserve1.quotient\n      )\n\n      const reserve0 = JSBI.add(this.reserve0.quotient, fee0)\n      const reserve1 = JSBI.add(this.reserve1.quotient, fee1)\n\n      const k = sqrt(JSBI.multiply(reserve0, reserve1))\n\n      const mintFee = this.getMintFee(reserve0, reserve1, totalSupply.quotient)\n\n      liquidity = JSBI.divide(JSBI.multiply(JSBI.subtract(computed, k), JSBI.add(totalSupply.quotient, mintFee)), k)\n\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupply.quotient)\n    )\n  }\n\n  public getAmountOut(amountIn: JSBI, reserveAmountIn: JSBI, reserveAmountOut: JSBI): JSBI {\n    const amountInWithFee = JSBI.multiply(amountIn, JSBI.subtract(MAX_FEE, JSBI.BigInt(this.fee)))\n    return JSBI.divide(\n      JSBI.multiply(amountInWithFee, reserveAmountOut),\n      JSBI.add(JSBI.multiply(reserveAmountIn, MAX_FEE), amountInWithFee)\n    )\n  }\n\n  public getLiquidityValueSingleToken(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let _totalSupply = JSBI.add(\n      totalSupply.quotient,\n      this.getMintFee(this.reserve0.quotient, this.reserve1.quotient, totalSupply.quotient)\n    )\n    let amount0 = JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserve0.quotient), _totalSupply)\n    let amount1 = JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserve1.quotient), _totalSupply)\n\n    if (token === this.token1) {\n      return CurrencyAmount.fromRawAmount(\n        token,\n        JSBI.add(\n          amount1,\n          this.getAmountOut(\n            amount0,\n            JSBI.subtract(this.reserve0.quotient, amount0),\n            JSBI.subtract(this.reserve1.quotient, amount1)\n          )\n        )\n      )\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.add(\n        amount0,\n        this.getAmountOut(\n          amount1,\n          JSBI.subtract(this.reserve1.quotient, amount1),\n          JSBI.subtract(this.reserve0.quotient, amount0)\n        )\n      )\n    )\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pair } from '@champagneswap/core-sdk'\nimport { ConstantProductRPool, RPool, RToken } from '@champagneswap/castle'\nimport { Pool } from '../entities/Pool'\nimport { ConstantProductPool } from '../entities/ConstantProductPool'\nimport { Fee } from '../enums/Fee'\n\nexport function convertPoolOrPairtoRPool(pool: Pool | Pair): RPool {\n  if (pool instanceof ConstantProductPool) {\n    return new ConstantProductRPool(\n      pool.liquidityToken.address,\n      pool.assets[0].wrapped as RToken,\n      pool.assets[1].wrapped as RToken,\n      pool.fee / 10000,\n      BigNumber.from(pool.reserves[0].quotient.toString()),\n      BigNumber.from(pool.reserves[1].quotient.toString())\n    )\n  } else if (pool instanceof Pair) {\n    return new ConstantProductRPool(\n      pool.liquidityToken.address,\n      pool.token0 as RToken,\n      pool.token1 as RToken,\n      Fee.DEFAULT / 10000,\n      BigNumber.from(pool.reserve0.quotient.toString()),\n      BigNumber.from(pool.reserve1.quotient.toString())\n    )\n  } else {\n    throw new Error('Unsupported type of pool !!!')\n  }\n}\n","import { Pair, Price, Token } from '@champagneswap/core-sdk'\nimport { calcTokenPrices as TinesCalcTokenPrices, RToken } from '@champagneswap/castle'\nimport { convertPoolOrPairtoRPool } from './convertPoolOrPairtoRPool'\nimport { Pool } from '../entities/Pool'\n\nexport function calcTokenPrices<T extends Token>(\n  pools: (Pool | Pair)[],\n  baseToken: T\n): Record<string, Price<Token, T>> {\n  const map: Map<RToken, number> = TinesCalcTokenPrices(pools.map(convertPoolOrPairtoRPool), baseToken as RToken)\n  const res: Record<string, Price<Token, T>> = {}\n  Array.from(map.entries()).forEach(\n    ([token, price]) => (res[token.address] = new Price(token as Token, baseToken, 1e18, Math.round(price * 1e18)))\n  )\n  return res\n}\n","import { JSBI, ONE, ZERO, difference } from '@champagneswap/core-sdk'\n\nimport { A_PRECISION } from '../constants'\n\nexport function computeHybridLiquidity(reserve0: JSBI, reserve1: JSBI, a: JSBI): JSBI {\n  if (JSBI.equal(reserve0, ZERO) && JSBI.equal(reserve1, ZERO)) {\n    return ZERO\n  }\n\n  const s = JSBI.add(reserve0, reserve1)\n\n  const N_A = JSBI.multiply(a, JSBI.BigInt(2))\n\n  let prevD\n\n  let D = s\n\n  for (let i = 0; i < 256; i++) {\n    const dP = JSBI.divide(\n      JSBI.divide(JSBI.multiply(JSBI.divide(JSBI.multiply(D, D), reserve0), D), reserve1),\n      JSBI.BigInt(4)\n    )\n\n    prevD = D\n\n    D = JSBI.divide(\n      JSBI.multiply(JSBI.add(JSBI.divide(JSBI.multiply(N_A, s), A_PRECISION), JSBI.multiply(dP, JSBI.BigInt(2))), D),\n      JSBI.add(\n        JSBI.multiply(JSBI.subtract(JSBI.divide(N_A, A_PRECISION), JSBI.BigInt(1)), D),\n        JSBI.multiply(dP, JSBI.BigInt(3))\n      )\n    )\n\n    if (JSBI.lessThanOrEqual(difference(D, prevD), ONE)) {\n      break\n    }\n  }\n\n  return D\n}\n","import { ChainId, ChainKey, JSBI, Token } from '@champagneswap/core-sdk'\n\nimport { Fee } from '../enums/Fee'\nimport EXPORTS from '@sushiswap/trident/exports/all.json'\nimport hybridPoolArtifact from '@sushiswap/trident/artifacts/contracts/pool/HybridPool.sol/HybridPool.json'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nexport const computeHybridPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  a,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  a: JSBI\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'uint256'],\n    [...[token0.address, token1.address].sort(), fee, a]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const HYBRID_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: hybridPoolArtifact.bytecode,\n    deployData,\n    masterDeployerAddress: EXPORTS[ChainId.KOVAN][ChainKey.KOVAN].contracts.MasterDeployer.address,\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), HYBRID_POOL_INIT_CODE_HASH)\n}\n","import { Currency, Pair, Route } from '@champagneswap/core-sdk'\nimport {\n\n  MultiRoute,\n\n} from '@champagneswap/castle'\n\nexport function convertTinesSingleRouteToLegacyRoute<TInput extends Currency, TOutput extends Currency>(\n  route: MultiRoute,\n  allPairs: Pair[],\n  input: TInput,\n  output: TOutput\n): Route<TInput, TOutput> {\n  const pairHash = new Map<string, Pair>()\n  allPairs.forEach((p) => pairHash.set(p.liquidityToken.address, p))\n  const pairs = route.legs.map((l) => {\n    const pair = pairHash.get(l.poolAddress)\n    if (pair === undefined) {\n      throw new Error('Internal Error 119')\n    }\n    return pair\n  })\n  return new Route(pairs, input, output)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pair, Token } from '@champagneswap/core-sdk'\nimport { MultiRoute, RToken, findMultiRouteExactIn as TinesFindMultiRouteExactIn } from '@champagneswap/castle'\nimport { Pool } from '../entities/Pool'\nimport { convertPoolOrPairtoRPool } from './convertPoolOrPairtoRPool'\n\nexport function findMultiRouteExactIn(\n  from: Token,\n  to: Token,\n  amountIn: BigNumber | number,\n  pools: (Pool | Pair)[],\n  baseToken: Token,\n  gasPrice: number\n): MultiRoute {\n  return TinesFindMultiRouteExactIn(\n    from as RToken,\n    to as RToken,\n    amountIn,\n    pools.map(convertPoolOrPairtoRPool),\n    baseToken as RToken,\n    gasPrice\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pair, Token } from '@champagneswap/core-sdk'\nimport { findMultiRouteExactOut as TinesFindMultiRouteExactOut, MultiRoute, RToken } from '@champagneswap/castle'\nimport { Pool } from '../entities/Pool'\nimport { convertPoolOrPairtoRPool } from './convertPoolOrPairtoRPool'\n\nexport function findMultiRouteExactOut(\n  from: Token,\n  to: Token,\n  amountIn: BigNumber | number,\n  pools: (Pool | Pair)[],\n  baseToken: Token,\n  gasPrice: number\n): MultiRoute {\n  return TinesFindMultiRouteExactOut(\n    from as RToken,\n    to as RToken,\n    amountIn,\n    pools.map(convertPoolOrPairtoRPool),\n    baseToken as RToken,\n    gasPrice\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pair, Token } from '@champagneswap/core-sdk'\nimport { findSingleRouteExactIn as TinesFindSingleRouteExactIn, MultiRoute, RToken } from '@champagneswap/castle'\nimport { Pool } from '../entities/Pool'\nimport { convertPoolOrPairtoRPool } from './convertPoolOrPairtoRPool'\n\nexport function findSingleRouteExactIn(\n  from: Token,\n  to: Token,\n  amountIn: BigNumber | number,\n  pools: (Pool | Pair)[],\n  baseToken: Token,\n  gasPrice: number\n): MultiRoute {\n  return TinesFindSingleRouteExactIn(\n    from as RToken,\n    to as RToken,\n    amountIn,\n    pools.map(convertPoolOrPairtoRPool),\n    baseToken as RToken,\n    gasPrice\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pair, Token } from '@champagneswap/core-sdk'\nimport { findSingleRouteExactOut as TinesFindSingleRouteExactOut, MultiRoute, RToken } from '@champagneswap/castle'\nimport { Pool } from '../entities/Pool'\nimport { convertPoolOrPairtoRPool } from './convertPoolOrPairtoRPool'\n\nexport function findSingleRouteExactOut(\n  from: Token,\n  to: Token,\n  amountIn: BigNumber | number,\n  pools: (Pool | Pair)[],\n  baseToken: Token,\n  gasPrice: number\n): MultiRoute {\n  return TinesFindSingleRouteExactOut(\n    from as RToken,\n    to as RToken,\n    amountIn,\n    pools.map(convertPoolOrPairtoRPool),\n    baseToken as RToken,\n    gasPrice\n  )\n}\n","export enum PoolState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID,\n}\n","export enum RouteType {\n  SinglePool = 'SinglePool',\n  SinglePath = 'SinglePath',\n  ComplexPath = 'ComplexPath',\n  Unknown = 'Unknown',\n}\n","import {\n  ChainId,\n  ChainKey,\n  CurrencyAmount,\n  InsufficientInputAmountError,\n  Price,\n  Token,\n  ZERO,\n} from '@champagneswap/core-sdk'\nimport { computeHybridLiquidity, computeHybridPoolAddress } from '../functions'\n\nimport { A_PRECISION } from '../constants'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport EXPORTS from '@sushiswap/trident/exports/all.json'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './Pool'\n\nexport class HybridPool implements Pool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  public readonly a: JSBI\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = Fee.DEFAULT, a: JSBI = A_PRECISION): string {\n    return computeHybridPoolAddress({\n      factoryAddress: EXPORTS[ChainId.KOVAN][ChainKey.KOVAN].contracts.HybridPoolFactory.address,\n      tokenA,\n      tokenB,\n      fee,\n      a,\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = Fee.DEFAULT,\n    a: JSBI = A_PRECISION\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      HybridPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, a),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.a = a\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get assets(): Token[] {\n    return [this.tokenAmounts[0].currency, this.tokenAmounts[1].currency]\n  }\n\n  public get reserves(): CurrencyAmount<Token>[] {\n    return [this.reserve0, this.reserve1]\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getNonOptimalMintFee(amount0: JSBI, amount1: JSBI, reserve0: JSBI, reserve1: JSBI): [JSBI, JSBI] {\n    if (JSBI.equal(reserve0, ZERO) || JSBI.equal(reserve1, ZERO)) {\n      return [ZERO, ZERO]\n    }\n    const amount1Optimal = JSBI.divide(JSBI.multiply(amount0, reserve1), reserve0)\n\n    if (JSBI.lessThanOrEqual(amount1Optimal, amount1)) {\n      return [\n        ZERO,\n        JSBI.divide(\n          JSBI.multiply(JSBI.BigInt(this.fee), JSBI.subtract(amount1, amount1Optimal)),\n          JSBI.multiply(JSBI.BigInt(2), JSBI.BigInt(10000))\n        ),\n      ]\n    } else {\n      const amount0Optimal = JSBI.divide(JSBI.multiply(amount1, reserve0), reserve1)\n      return [\n        JSBI.divide(\n          JSBI.multiply(JSBI.BigInt(this.fee), JSBI.subtract(amount0, amount0Optimal)),\n          JSBI.multiply(JSBI.BigInt(2), JSBI.BigInt(10000))\n        ),\n        ZERO,\n      ]\n    }\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    // Expected balances after minting\n    const balance0 = JSBI.add(tokenAmounts[0].quotient, this.reserve0.quotient)\n    const balance1 = JSBI.add(tokenAmounts[1].quotient, this.reserve1.quotient)\n\n    const [fee0, fee1] = this.getNonOptimalMintFee(\n      tokenAmounts[0].quotient,\n      tokenAmounts[1].quotient,\n      this.reserve0.quotient,\n      this.reserve1.quotient\n    )\n\n    let liquidity: JSBI\n\n    const newLiquidity = computeHybridLiquidity(JSBI.subtract(balance0, fee0), JSBI.subtract(balance1, fee1), this.a)\n\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(newLiquidity, JSBI.BigInt(1000))\n    } else {\n      const oldLiquidity = computeHybridLiquidity(this.reserve0.quotient, this.reserve1.quotient, this.a)\n\n      liquidity = JSBI.divide(\n        JSBI.multiply(JSBI.subtract(newLiquidity, oldLiquidity), totalSupply.quotient),\n        oldLiquidity\n      )\n\n      // console.log({\n      //   oldLiquidity: oldLiquidity.toString(),\n      // })\n    }\n\n    // console.log({\n    //   tokenAmountA: tokenAmountA.quotient.toString(),\n    //   tokenAmountB: tokenAmountB.quotient.toString(),\n    //   totalSupply: totalSupply.quotient.toString(),\n    //   newLiquidity: newLiquidity.toString(),\n    //   liquidity: liquidity.toString(),\n    // })\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupply.quotient)\n    )\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price, TradeType, ZERO, JSBI, Fraction, ONE } from '@champagneswap/core-sdk'\nimport { MultiRoute, RToken } from '@champagneswap/castle'\nimport invariant from 'tiny-invariant'\n\n/**\n * Represents a trade executed against a list of pools.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pools the trade goes through and the input/output currencies.\n   */\n  public readonly route: MultiRoute\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: MultiRoute\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: MultiRoute\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public constructor(\n    route: MultiRoute,\n    // amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const amountIn = CurrencyAmount.fromRawAmount(route.fromToken as TInput, route.amountIn.toFixed(0))\n\n    const amountOut = CurrencyAmount.fromRawAmount(route.toToken as TOutput, route.amountOut.toFixed(0))\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        amountIn.currency,\n        amountIn.numerator,\n        amountIn.denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        amountOut.currency,\n        amountOut.numerator,\n        amountOut.denominator\n      )\n    } else {\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        amountIn.currency,\n        amountOut.numerator,\n        amountOut.denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        amountOut.currency,\n        amountIn.numerator,\n        amountIn.denominator\n      )\n    }\n\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n\n    // this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n\n    this.priceImpact = new Percent(JSBI.BigInt(0), JSBI.BigInt(10000))\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    route: MultiRoute,\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(\n      { ...route, fromToken: currencyAmountIn.currency as RToken, toToken: currencyOut as RToken },\n      TradeType.EXACT_INPUT\n    )\n  }\n\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    route: MultiRoute,\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(\n      { ...route, fromToken: currencyIn as RToken, toToken: currencyAmountOut.currency as RToken },\n      TradeType.EXACT_OUTPUT\n    )\n  }\n}\n"],"names":["A_PRECISION","JSBI","BigInt","MAX_FEE","ROUTER_ADDRESS","ChainId","KOVAN","RINKEBY","Pool","Fee","computePoolInitCodeHash","creationCode","deployData","masterDeployerAddress","keccak256","pack","defaultAbiCoder","encode","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","sortsBefore","token0","token1","address","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","constantProductPoolArtifact","bytecode","EXPORTS","ChainKey","contracts","MasterDeployer","getCreate2Address","ConstantProductPool","currencyAmountA","currencyAmountB","DEFAULT","currencyAmounts","currency","liquidityToken","Token","chainId","getAddress","tokenAmounts","ConstantProductPoolFactory","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","ZERO","InsufficientReservesError","inputReserve","outputReserve","inputAmountWithFee","multiply","subtract","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","InsufficientInputAmountError","getInputAmount","greaterThanOrEqual","ONE","getNonOptimalMintFee","amount0","amount1","amount1Optimal","lessThanOrEqual","amount0Optimal","getMintFee","totalSupply","console","log","kLast","toString","computed","sqrt","notEqual","greaterThan","liquidity","getLiquidityMinted","tokenAmountA","tokenAmountB","balance0","balance1","MINIMUM_LIQUIDITY","fee0","fee1","k","mintFee","getLiquidityValue","getAmountOut","amountIn","reserveAmountIn","reserveAmountOut","amountInWithFee","getLiquidityValueSingleToken","_totalSupply","result","Price","convertPoolOrPairtoRPool","pool","ConstantProductRPool","assets","wrapped","BigNumber","from","reserves","Pair","Error","calcTokenPrices","pools","baseToken","map","TinesCalcTokenPrices","res","Array","entries","forEach","price","Math","round","computeHybridLiquidity","a","s","N_A","prevD","D","i","dP","difference","computeHybridPoolAddress","HYBRID_POOL_INIT_CODE_HASH","hybridPoolArtifact","convertTinesSingleRouteToLegacyRoute","route","allPairs","input","output","pairHash","Map","p","set","pairs","legs","l","pair","get","poolAddress","undefined","Route","findMultiRouteExactIn","to","gasPrice","TinesFindMultiRouteExactIn","findMultiRouteExactOut","TinesFindMultiRouteExactOut","findSingleRouteExactIn","TinesFindSingleRouteExactIn","findSingleRouteExactOut","TinesFindSingleRouteExactOut","PoolState","RouteType","HybridPool","HybridPoolFactory","newLiquidity","oldLiquidity","Trade","tradeType","fromToken","toFixed","amountOut","toToken","TradeType","EXACT_INPUT","fromFractionalAmount","executionPrice","priceImpact","Percent","exactIn","exactOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","lessThan","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","bestTradeExactOut","currencyIn","currencyAmountOut"],"mappings":"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"}