{"version":3,"file":"castle.cjs.development.js","sources":["../src/Utils.ts","../src/PrimaryPools.ts","../src/CLPool.ts","../src/Graph.ts","../src/MultiRouter.ts","../src/deprecated/MultiRouterTypes.ts","../src/deprecated/MultiRouterMath.ts"],"sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport function ASSERT(f: () => boolean, t?: string) {\n    if (!f() && t) console.error(t);\n  }\n  \n  export function closeValues(a: number, b: number, accuracy: number): boolean {\n    if (accuracy === 0) return a === b;\n    if (a < 1 / accuracy) return Math.abs(a - b) <= 10;\n    return Math.abs(a / b - 1) < accuracy;\n  }\n  \n  export function calcSquareEquation(\n    a: number,\n    b: number,\n    c: number\n  ): [number, number] {\n    const D = b * b - 4 * a * c;\n    console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\n    const sqrtD = Math.sqrt(D);\n    return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\n  }\n  \n  // returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n  // hint - approximation of x to spead up the algorithm\n  // f assumed to be continues monotone growth function defined everywhere\n  export function revertPositive(\n    f: (x: number) => number,\n    out: number,\n    hint = 1\n  ) {\n    try {\n      if (out <= f(0)) return 0;\n      let min, max;\n      if (f(hint) > out) {\n        min = hint / 2;\n        while (f(min) > out) min /= 2;\n        max = min * 2;\n      } else {\n        max = hint * 2;\n        while (f(max) < out) max *= 2;\n        min = max / 2;\n      }\n  \n      while (max / min - 1 > 1e-4) {\n        const x0: number = (min + max) / 2;\n        const y0 = f(x0);\n        if (out === y0) return x0;\n        if (out < y0) max = x0;\n        else min = x0;\n      }\n      return (min + max) / 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n  \n  export function getBigNumber(\n    value: number\n  ): BigNumber {\n    const v = Math.abs(value)\n    if (v < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value));\n  \n    const exp = Math.floor(Math.log(v) / Math.LN2);\n    console.assert(exp >= 51, \"Internal Error 314\");\n    const shift = exp - 51;\n    const mant = Math.round(v / Math.pow(2, shift));\n    const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\n    return value > 0 ? res : res.mul(-1);\n  }\n  ","import { BigNumber } from '@ethersproject/bignumber'\nimport { getBigNumber, revertPositive } from './Utils'\n\nexport const TYPICAL_SWAP_GAS_COST = 40_000\nexport const TYPICAL_MINIMAL_LIQUIDITY = 1000\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport abstract class RPool {\n  readonly address: string\n  readonly token0: RToken\n  readonly token1: RToken\n  readonly fee: number\n  reserve0: BigNumber\n  reserve1: BigNumber\n  readonly minLiquidity: number\n  readonly swapGasCost: number\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    minLiquidity = TYPICAL_MINIMAL_LIQUIDITY,\n    swapGasCost = TYPICAL_SWAP_GAS_COST\n  ) {\n    this.address = address\n    ;(this.token0 = token0), (this.token1 = token1)\n    this.fee = fee\n    this.minLiquidity = minLiquidity\n    this.swapGasCost = swapGasCost\n    this.reserve0 = reserve0\n    this.reserve1 = reserve1\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  // Returns [<output amount>, <gas consumption estimation>]\n  abstract calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number}\n  abstract calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number}\n  abstract calcCurrentPriceWithoutFee(direction: boolean): number\n  // abstract calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;\n  // abstract calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint: number): number;\n}\n\nexport class ConstantProductRPool extends RPool {\n  reserve0Number: number\n  reserve1Number: number\n\n  constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.reserve0Number = parseInt(reserve0.toString())\n    this.reserve1Number = parseInt(reserve1.toString())\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve0Number = parseInt(res0.toString())\n    this.reserve1 = res1\n    this.reserve1Number = parseInt(res1.toString())\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    return {out: (y * amountIn) / (x / (1 - this.fee) + amountIn), gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    let input = (x * amountOut) / (1 - this.fee) / (y - amountOut)\n    //if (input < 1) input = 1\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return (y * xf) / (xf + amountIn) / (xf + amountIn)\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return Math.sqrt(y * xf * price) - xf // TODO: or y*xf/price ???\n  }\n\n  getLiquidity() {\n    return Math.sqrt(this.reserve0Number * this.reserve1Number)\n  }\n}\n\nexport class HybridRPool extends RPool {\n  readonly A: number\n  readonly A_PRECISION = 100\n  D: BigNumber // set it to 0 if reserves are changed !!\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    A: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber\n  ) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.A = A\n    this.D = BigNumber.from(0)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.D = BigNumber.from(0)\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  computeLiquidity(): BigNumber {\n    if (!this.D.eq(0)) return this.D // already calculated\n\n    const r0 = this.reserve0\n    const r1 = this.reserve1\n\n    if (r0.isZero() && r1.isZero()) return BigNumber.from(0)\n\n    const s = r0.add(r1)\n    const nA = BigNumber.from(this.A * 2)\n    let prevD\n    let D = s\n    for (let i = 0; i < 256; i++) {\n      const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n      prevD = D\n      D = nA\n        .mul(s)\n        .div(this.A_PRECISION)\n        .add(dP.mul(2))\n        .mul(D)\n        .div(nA.div(this.A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n      if (D.sub(prevD).abs().lte(1)) {\n        break\n      }\n    }\n    this.D = D\n    return D\n  }\n\n  computeY(x: BigNumber): BigNumber {\n    const D = this.computeLiquidity()\n\n    const nA = this.A * 2\n\n    let c = D.mul(D)\n      .div(x.mul(2))\n      .mul(D)\n      .div((nA * 2) / this.A_PRECISION)\n    let b = D.mul(this.A_PRECISION).div(nA).add(x)\n\n    let yPrev\n    let y = D\n    for (let i = 0; i < 256; i++) {\n      yPrev = y\n\n      y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n      if (y.sub(yPrev).abs().lte(1)) {\n        break\n      }\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    const xNewBN = xBN.add(getBigNumber(amountIn * (1 - this.fee)))\n    const yNewBN = this.computeY(xNewBN)\n    const dy = parseInt(yBN.sub(yNewBN).toString())\n\n    return {out: dy, gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    let yNewBN = yBN.sub(getBigNumber(amountOut))\n    if (yNewBN.lt(1))\n      // lack of precision\n      yNewBN = BigNumber.from(1)\n\n    const xNewBN = this.computeY(yNewBN)\n    let input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - this.fee))\n\n    //if (input < 1) input = 1\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const x = parseInt(xBN.toString())\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const D = parseInt(this.computeLiquidity().toString())\n    const A = this.A / this.A_PRECISION\n    const xI = x + amountIn\n    const b = 4 * A * xI + D - 4 * A * D\n    const ac4 = (D * D * D) / xI\n    const Ds = Math.sqrt(b * b + 4 * A * ac4)\n    const res = (0.5 - (2 * b - ac4 / xI) / Ds / 4) * oneMinusFee\n    return res\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint = 1): number {\n    // TODO:  (x:number) => this.calcPrice(x, !direction, takeFeeIntoAccount)  ???\n    return revertPositive((x: number) => 1 / this.calcPrice(x, direction, takeFeeIntoAccount), price, hint)\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool, RToken, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST } from \"./PrimaryPools\";\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\n\nexport interface CLTick {\n  index: number\n  DLiquidity: number\n}\n\nexport class CLRPool extends RPool {\n  tickSpacing: number\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n\n  constructor(      \n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    tickSpacing: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    liquidity: number,\n    sqrtPrice: number,\n    nearestTick: number,\n    ticks: CLTick[]\n  ) {\n    super(      \n      address,\n      token0,\n      token1,\n      fee,\n      reserve0,\n      reserve1,\n      TYPICAL_MINIMAL_LIQUIDITY,\n      TYPICAL_SWAP_GAS_COST,\n    )\n    this.tickSpacing = tickSpacing\n    this.liquidity = liquidity\n    this.sqrtPrice = sqrtPrice\n    this.nearestTick = nearestTick\n    this.ticks = ticks\n    if (this.ticks.length === 0) {\n      this.ticks.push({ index: CL_MIN_TICK, DLiquidity: 0 })\n      this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n    }\n    if (this.ticks[0].index > CL_MIN_TICK) this.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n    if (this.ticks[this.ticks.length - 1].index < CL_MAX_TICK) this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let outAmount = 0\n    let input = amountIn\n  \n    while (input > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return {out: outAmount, gasSpent: this.swapGasCost}\n  \n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n      let output = 0\n  \n      if (direction) {\n        const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n        //console.log('input, maxDx', input, maxDx);\n  \n        if (input <= maxDx) {\n          output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n          input = 0\n        } else {\n          output = currentLiquidity * (currentPrice - nextTickPrice)\n          currentPrice = nextTickPrice\n          input -= maxDx\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (input <= maxDy) {\n          output = input / currentPrice / (currentPrice + input / currentLiquidity)\n          input = 0\n        } else {\n          output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          input -= maxDy\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n  \n      outAmount += output * (1 - this.fee)\n      //console.log('out', outAmount);\n    }\n  \n    return {out: outAmount, gasSpent: this.swapGasCost}  // TODO: more accurate gas prediction \n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {  \n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let input = 0\n    let outBeforeFee = amountOut/(1-this.fee)    \n\n    while (outBeforeFee > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return {inp: input, gasSpent: this.swapGasCost}\n  \n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n  \n      if (direction) {\n        const maxDy = currentLiquidity * (currentPrice - nextTickPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (outBeforeFee <= maxDy) {\n          input += outBeforeFee / currentPrice / (currentPrice - outBeforeFee / currentLiquidity)\n          outBeforeFee = 0\n        } else {\n          input += (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDy\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDx = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        //console.log('outBeforeFee, maxDx', outBeforeFee, maxDx);\n  \n        if (outBeforeFee <= maxDx) {\n          input += (currentLiquidity * currentPrice * outBeforeFee) / (currentLiquidity / currentPrice - outBeforeFee)\n          outBeforeFee = 0\n        } else {\n          input += currentLiquidity * (nextTickPrice - currentPrice)\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDx\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n    }\n  \n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n  \n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const p = this.sqrtPrice*this.sqrtPrice\n    return direction ? p : 1/p\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool, RToken } from \"./PrimaryPools\";\nimport {ASSERT, getBigNumber, closeValues} from \"./Utils\";\n\n// Routing info about each one swap\nexport interface RouteLeg {\n  poolAddress: string       // which pool use for swap\n  poolFee: number\n\n  tokenFrom: RToken         // from what token to swap\n  tokenTo: RToken           // to what token \n\n  assumedAmountIn: number   // assumed number of input token for swapping\n  assumedAmountOut: number  // assumed number of output token after swapping\n\n  swapPortion: number       // for router contract\n  absolutePortion: number   // to depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = \"Success\",\n  NoWay = \"NoWay\",\n  Partial = \"Partial\",\n}\n\nexport interface MultiRoute {\n  status: RouteStatus;\n  fromToken: RToken;\n  toToken: RToken;\n  primaryPrice?: number;\n  swapPrice?: number;\n  priceImpact?: number;\n  amountIn: number;\n  amountInBN: BigNumber;\n  amountOut: number;\n  amountOutBN: BigNumber;\n  legs: RouteLeg[];\n  gasSpent: number;\n  totalAmountOut: number;\n  totalAmountOutBN: BigNumber;\n}\n\nexport class Edge {\n  pool: RPool;\n  vert0: Vertice;\n  vert1: Vertice;\n\n  canBeUsed: boolean;\n  direction: boolean;\n  amountInPrevious: number;   // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number;  // How many liquidity were passed from vert0 to vert1\n  spentGas: number            // How much gas was spent for this edge\n  spentGasNew: number         //  How much gas was will be spent for this edge\n  bestEdgeIncome: number;     // debug data\n\n\n  constructor(p: RPool, v0: Vertice, v1: Vertice) {\n    this.pool = p;\n    this.vert0 = v0;\n    this.vert1 = v1;\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.spentGas = 0;\n    this.spentGasNew = 0;\n    this.bestEdgeIncome = 0;\n  }\n\n  cleanTmpData() {\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.spentGas = 0;\n    this.spentGasNew = 0;\n    this.bestEdgeIncome = 0;\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\n  }\n\n  calcOutput(v: Vertice, amountIn: number): {out: number, gasSpent: number} {\n    let res, gas;\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          const {inp, gasSpent} = this.pool.calcInByOut(this.amountOutPrevious - amountIn, true)\n          res = this.amountInPrevious - inp\n          gas = gasSpent\n        } else {\n          const {out, gasSpent} = this.pool.calcOutByIn(amountIn - this.amountOutPrevious, false)\n          res = out + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const {out, gasSpent} = this.pool.calcOutByIn(this.amountOutPrevious + amountIn, false)\n        res = out - this.amountInPrevious;\n        gas = gasSpent\n      }\n    } else {\n      if (this.direction) {\n        const {out, gasSpent} = this.pool.calcOutByIn(this.amountInPrevious + amountIn, true)\n        res = out - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountIn < this.amountInPrevious) {\n          const {inp, gasSpent} = this.pool.calcInByOut(this.amountInPrevious - amountIn, false)\n          res = this.amountOutPrevious - inp\n          gas = gasSpent\n        } else {\n          const {out, gasSpent} = this.pool.calcOutByIn(amountIn - this.amountInPrevious, true)\n          res = out + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return {out: res, gasSpent: gas - this.spentGas};\n  }\n\n  calcInput(v: Vertice, amountOut: number): {inp: number, gasSpent: number}  {\n    let res, gas;\n    if (v === this.vert1) {\n      if (!this.direction) {\n        if (amountOut < this.amountOutPrevious) {\n          const {out, gasSpent}  = this.pool.calcOutByIn(this.amountOutPrevious - amountOut, false)\n          res = this.amountInPrevious - out\n          gas = gasSpent\n        } else {\n          const {inp, gasSpent} = this.pool.calcInByOut(amountOut - this.amountOutPrevious, true)\n          res = inp + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const {inp, gasSpent} = this.pool.calcInByOut(this.amountOutPrevious + amountOut, true)\n        res = inp - this.amountInPrevious\n        gas = gasSpent\n      }\n    } else {\n      if (!this.direction) {\n        const {inp, gasSpent} = this.pool.calcInByOut(this.amountInPrevious + amountOut, false)\n        res = inp - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountOut < this.amountInPrevious) {\n          const {out, gasSpent} = this.pool.calcOutByIn(this.amountInPrevious - amountOut, true)\n          res = this.amountOutPrevious - out\n          gas = gasSpent\n        } else {\n          const {inp, gasSpent} = this.pool.calcInByOut(amountOut - this.amountInPrevious, false)\n          res = inp + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return {inp: res, gasSpent: gas - this.spentGas};\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.pool.minLiquidity;\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.pool.minLiquidity;\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.pool.minLiquidity;\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.pool.minLiquidity;\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = this.pool.calcOutByIn(amountInNew, true).out;\n      const res = closeValues(amountOutNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-1 !!\",\n          amountOutNew,\n          calc,\n          Math.abs(calc / amountOutNew - 1)\n        );\n      return res;\n    } else {\n      const calc = this.pool.calcOutByIn(amountOutNew, false).out;\n      const res = closeValues(amountInNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-2!!\",\n          amountInNew,\n          calc,\n          Math.abs(calc / amountInNew - 1)\n        );\n      return res;\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error(\"Error 221\");\n    this.spentGas = this.spentGasNew\n\n    ASSERT(() => {\n      if (this.direction)\n        return closeValues(\n          this.amountOutPrevious,\n          this.pool.calcOutByIn(this.amountInPrevious, this.direction).out,\n          1e-6\n        );\n      else {\n        return closeValues(\n          this.amountInPrevious,\n          this.pool.calcOutByIn(this.amountOutPrevious, this.direction).out,\n          1e-6\n        );\n      }\n    }, `Error 225`)\n  }\n}\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  cleanTmpData() {\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n\n  getOutputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === this)) return false\n      return true\n    })\n  }\n\n  getInputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === this)) return false\n      return true\n    })\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<string, Vertice>\n\n  constructor(pools: RPool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = [];\n    this.edges = [];\n    this.tokens = new Map();\n    pools.forEach((p) => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken.address)\n    if (baseVert) {\n      this.setPricesStable(baseVert, 1, gasPrice)\n    }\n  }\n\n  cleanTmpData() {\n    this.edges.forEach(e => e.cleanTmpData())\n    this.vertices.forEach(v => v.cleanTmpData())\n  }\n\n  // Set prices by greedy algorithm\n  setPricesStable(from: Vertice, price: number, gasPrice: number) {\n    this.vertices.forEach(v => v.price = 0) // initialization\n    from.price = price\n    from.gasPrice = gasPrice\n    \n    const edgeValues = new Map<Edge, number>()\n    const value = (e: Edge): number => edgeValues.get(e) as number\n    \n    function addVertice(v: Vertice) {\n      const newEdges = v.edges.filter(e => v.getNeibour(e)?.price == 0)\n      newEdges.forEach(e => edgeValues.set(e, v.price*parseInt(e.reserve(from).toString())) )\n      newEdges.sort((e1, e2) => value(e1) - value(e2))\n      const res: Edge[] = []\n      while (nextEdges.length && newEdges.length) {\n        if (value(nextEdges[0]) < value(newEdges[0])) res.push(nextEdges.shift() as Edge)  \n        else res.push(newEdges.shift() as Edge)\n      }\n      nextEdges = [...res, ...nextEdges, ...newEdges]\n    }\n    \n    let nextEdges: Edge[] = []\n    addVertice(from)\n    while (nextEdges.length > 0) {\n      const bestEdge = nextEdges.pop() as Edge\n      const [vFrom, vTo] = bestEdge.vert1.price !== 0\n        ? [bestEdge.vert1, bestEdge.vert0] : [bestEdge.vert0, bestEdge.vert1]\n      if (vTo.price !== 0) continue\n      let p = bestEdge.pool.calcCurrentPriceWithoutFee(vFrom === bestEdge.vert1);\n      vTo.price = vFrom.price*p\n      vTo.gasPrice = vFrom.gasPrice/p\n      addVertice(vTo)\n    }\n  }\n\n  // Set prices by search in depth\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0;\n      if (v.price !== 0) return;\n      let p = e.pool.calcCurrentPriceWithoutFee(from === e.vert1);\n      this.setPrices(v, price * p, gasPrice / p);\n    });\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token.address)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token.address, vert)\n    return vert\n  }\n\n  /*exportPath(from: RToken, to: RToken) {\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    function edgeStyle(e: Edge) {\n      const finish = e.vert1.bestSource === e\n      const start = e.vert0.bestSource === e\n      let label\n      if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n      if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n      const edgeValue = route.has(e) ? 'value: 2' : undefined\n      let arrow\n      if (finish && start) arrow = 'arrows: \"from,to\"'\n      if (finish) arrow = 'arrows: \"to\"'\n      if (start) arrow = 'arrows: \"from\"'\n      return ['', label, edgeValue, arrow].filter((a) => a !== undefined).join(', ')\n    }\n\n    function print(n: number, digits: number) {\n      let out\n      if (n === 0) out = '0'\n      else {\n        const n0 = n > 0 ? n : -n\n        const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n        if (shift <= 0) out = `${Math.round(n0)}`\n        else {\n          const mult = Math.pow(10, shift)\n          out = `${Math.round(n0 * mult) / mult}`\n        }\n        if (n < 0) out = -out\n      }\n      return out\n    }\n\n    function nodeLabel(v: Vertice) {\n      const value = (v.bestIncome * v.price) / toVert.price\n      const income = `${print(value, 3)}`\n      const total = `${print(v.bestTotal, 3)}`\n      // const income = `${print((value/initValue-1)*100, 3)}%`\n      // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n      const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n      return [checkLine, income, total].filter((a) => a !== undefined).join(':')\n    }\n\n    const nodes = `var nodes = new vis.DataSet([\n      ${this.vertices.map((t) => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    ]);\\n`\n    const edges = `var edges = new vis.DataSet([\n      ${this.edges\n        .map((p) => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`)\n        .join(',\\n\\t\\t')}\n    ]);\\n`\n    const data = `var data = {\n        nodes: nodes,\n        edges: edges,\n    };\\n`\n\n    // TODO: This should be removed, this pacakge will not be installable on a client while this remains.\n    const fs = require(\"fs\");\n    fs.writeFileSync(\n      \"D:/Info/Notes/GraphVisualization/data.js\",\n      nodes + edges + data\n    );\n  }*/\n\n  findBestPathExactIn(\n    from: RToken,\n    to: RToken,\n    amountIn: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from.address)\n    const finish = this.tokens.get(to.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    });\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome, gas\n        try {\n          const {out, gasSpent} = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(out) || !isFinite(gasSpent))   // Math errors protection\n            return\n          newIncome = out\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n        e.spentGasNew = e.spentGas + gas;\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  findBestPathExactOut(\n    from: RToken,\n    to: RToken,\n    amountOut: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        input: number\n        gasSpent: number\n        totalInput: number\n      }\n    | undefined {\n    const start = this.tokens.get(to.address)\n    const finish = this.tokens.get(from.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    });\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountOut\n    start.bestTotal = amountOut\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal < closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.push(v.bestSource)\n        }\n        return {\n          path: bestPath,\n          input: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalInput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome, gas\n        try {\n          const {inp, gasSpent} = e.calcInput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(inp) || !isFinite(gasSpent))   // Math errors protection\n            return\n          if (inp < 0) return // No enouph liquidity in the pool\n          newIncome = inp\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price + newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n        e.spentGasNew = e.spentGas + gas;\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal < v2.bestTotal) {\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach((e) => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeibour(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    })\n\n    ASSERT(() => {\n      const res = this.vertices.every((v) => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach((e) => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n      return res\n    }, 'Error 290')\n  }\n\n  getPrimaryPriceForPath(from: Vertice, path: Edge[]): number {\n    let p = 1\n    let prevToken = from\n    path.forEach( edge => {\n      const direction = edge.vert0 === prevToken\n      const edgePrice = edge.pool.calcCurrentPriceWithoutFee(direction)\n      p *= edgePrice\n      prevToken = prevToken.getNeibour(edge) as Vertice\n    })\n    return p\n  }\n\n  findBestRouteExactIn(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactIn(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        if (step === 0) {\n          primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const {legs, gasSpent, topologyWasChanged} = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn)\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = output/amountIn\n      priceImpact = primaryPrice !== undefined? 1- swapPrice/primaryPrice : undefined\n    } catch(e) { /* skip division by 0 errors*/}\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: amountIn * totalrouted,\n      amountInBN: getBigNumber(amountIn * totalrouted),\n      amountOut: output,\n      amountOutBN: getBigNumber(output),\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(output - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  findBestRouteExactOut(from: RToken, to: RToken, amountOut: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let input = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactOut(from, to, amountOut * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        input += p.input\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        if (step === 0) {\n          primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const {legs, gasSpent, topologyWasChanged} = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      input = this.calcLegsAmountIn(legs, amountOut) ///\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = amountOut/input\n      priceImpact = primaryPrice !== undefined? 1- swapPrice/primaryPrice : undefined\n    } catch(e) { /* skip division by 0 errors*/}\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: input,\n      amountInBN: getBigNumber(input),\n      amountOut: amountOut * totalrouted,\n      amountOutBN: getBigNumber(amountOut * totalrouted),\n      legs,\n      gasSpent,\n      totalAmountOut: amountOut - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(amountOut - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): {\n    legs: RouteLeg[],\n    gasSpent: number,\n    topologyWasChanged: boolean\n  } {\n    const {vertices, topologyWasChanged} = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    vertices.forEach((n) => {\n      const outEdges = n.getOutputEdges().map((e) => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from.vert, from.amount] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        const edge = e[0] as Edge\n        legs.push({\n          poolAddress: edge.pool.address,\n          poolFee: edge.pool.fee,\n          tokenFrom: n.token,\n          tokenTo: (n.getNeibour(edge) as Vertice).token,\n          assumedAmountIn: edge.direction ? edge.amountInPrevious : edge.amountOutPrevious,\n          assumedAmountOut:  edge.direction ? edge.amountOutPrevious : edge.amountInPrevious,\n          swapPortion: quantity,\n          absolutePortion: p / total,\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return {legs, gasSpent, topologyWasChanged}\n  }\n\n  edgeFrom(e: Edge): {vert: Vertice, amount: number} | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? {vert: e.vert0, amount: e.amountInPrevious} : {vert: e.vert1, amount: e.amountOutPrevious}\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number) {\n    const amounts = new Map<string, number>()\n    amounts.set(legs[0].tokenFrom.address, amountIn)\n    legs.forEach((l) => {\n      const vert = this.tokens.get(l.tokenFrom.address);\n      console.assert(vert !== undefined, \"Internal Error 570\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.poolAddress\n      );\n      console.assert(edge !== undefined, \"Internel Error 569\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert0;\n\n      const inputTotal = amounts.get(l.tokenFrom.address);\n      console.assert(inputTotal !== undefined, \"Internal Error 564\");\n      const input = (inputTotal as number) * l.swapPortion;\n      amounts.set(l.tokenFrom.address, (inputTotal as number) - input);\n      const output = pool.calcOutByIn(input, direction).out;\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token.address);\n      amounts.set(vertNext.token.address, (prevAmount || 0) + output);\n    });\n    return amounts.get(legs[legs.length-1].tokenTo.address) || 0;\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountIn(legs: RouteLeg[], amountOut: number) {\n    const totalOutputAssumed = new Map<string, number>()\n    legs.forEach(l => {\n      const prevValue = totalOutputAssumed.get(l.tokenFrom.address) || 0\n      totalOutputAssumed.set(l.tokenFrom.address, prevValue + l.assumedAmountOut)\n    })\n\n    const amounts = new Map<string, number>()\n    amounts.set(legs[legs.length-1].tokenTo.address, amountOut)\n    for (let i = legs.length - 1; i >= 0; --i) {\n      const l = legs[i]\n      const vert = this.tokens.get(l.tokenTo.address);\n      console.assert(vert !== undefined, \"Internal Error 884\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.poolAddress\n      );\n      console.assert(edge !== undefined, \"Internel Error 888\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert1;\n\n      const outputTotal = amounts.get(l.tokenTo.address);\n      console.assert(outputTotal !== undefined, \"Internal Error 893\");\n      const totalAssumed = totalOutputAssumed.get(l.tokenFrom.address)\n      console.assert(totalAssumed !== undefined, \"Internal Error 903\");\n      const output = (outputTotal as number) * l.assumedAmountOut / (totalAssumed as number);\n      const input = pool.calcInByOut(output, direction).inp;\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token.address);\n      amounts.set(vertNext.token.address, (prevAmount || 0) + input);\n    };\n    return amounts.get(legs[0].tokenFrom.address) || 0;\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): {vertices: Vertice[], topologyWasChanged: boolean} {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result.status !== 2) {\n      topologyWasChanged = true\n      console.assert(result.status === 0, 'Internal Error 554')\n      while (result.status === 0) {\n        this.removeWeakestEdge(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      if (result.status === 3) {\n        this.removeDeadEnds(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      console.assert(result.status === 2, 'Internal Error 563')\n      if (result.status !== 2) return {vertices: [], topologyWasChanged}\n    }\n    return {vertices: result.vertices, topologyWasChanged}\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach((v) => {\n      v.getInputEdges().forEach((e) => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      v1.getOutputEdges().forEach((e) => {\n        if (v1.getNeibour(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    // @ts-ignore\n    minVert.getOutputEdges().forEach((e) => {\n      if (minVert.getNeibour(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): {status: number, vertices: Vertice[]} {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = current.getOutputEdges()\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return {status: 0, vertices: foundCycle}\n    if (foundDeadEndVerts.length) return {status: 3, vertices: foundDeadEndVerts}\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return {status: 2, vertices: vertsFinished.reverse()}\n    console.assert(true, 'Internal Error 612')\n    return {status: 1, vertices: []}\n  }\n}","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MultiRoute, Graph, RouteStatus } from \"./Graph\";\nimport { RPool, RToken } from \"./PrimaryPools\";  \n\n// Assumes route is a single path\nfunction calcPriceImactWithoutFee(route: MultiRoute) {\n  if (route.primaryPrice === undefined || route.swapPrice === undefined) {\n    return undefined\n  } else {\n    let oneMinusCombinedFee = 1\n    route.legs.forEach(l => oneMinusCombinedFee *= (1-l.poolFee))\n    //const combinedFee = 1-oneMinusCombinedFee\n    return Math.max(0, 1-route.swapPrice/route.primaryPrice/oneMinusCombinedFee)\n  }\n}\n\nconst defaultFlowNumber = 12\nconst maxFlowNumber = 100\nfunction calcBestFlowNumber(bestSingleRoute: MultiRoute, amountIn: number, gasPriceIn?: number): number {\n  const priceImpact = calcPriceImactWithoutFee(bestSingleRoute)\n  if (!priceImpact) return defaultFlowNumber\n\n  const bestFlowAmount = Math.sqrt(bestSingleRoute.gasSpent*(gasPriceIn || 0)*amountIn/priceImpact)\n  const bestFlowNumber = Math.round(amountIn/bestFlowAmount)\n  if (!isFinite(bestFlowNumber)) return defaultFlowNumber\n\n  const realFlowNumber = Math.max(1, Math.min(bestFlowNumber, maxFlowNumber))\n  return realFlowNumber\n}\n\nfunction getBetterRouteExactIn(route1: MultiRoute, route2: MultiRoute): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  return route1.totalAmountOut > route2.totalAmountOut ? route1 : route2\n}\n\nexport function findMultiRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactIn(from, to, amountIn, flows)\n\n  const outSingle = g.findBestRouteExactIn(from, to, amountIn, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactIn(from, to, amountIn/100 + 10_000, 0)?.gasSpent === 0) return outSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(outSingle, amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return outSingle\n\n  const outMulti = g.findBestRouteExactIn(from, to, amountIn, bestFlowNumber)\n  return getBetterRouteExactIn(outSingle, outMulti)\n}\n\nfunction getBetterRouteExactOut(route1: MultiRoute, route2: MultiRoute, gasPrice: number): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  const totalAmountIn1 = route1.amountIn + route1.gasSpent*gasPrice\n  const totalAmountIn2 = route2.amountIn + route2.gasSpent*gasPrice\n  return totalAmountIn1 < totalAmountIn2 ? route1 : route2\n}\n\nexport function findMultiRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactOut(from, to, amountOut, flows)\n\n  const inSingle = g.findBestRouteExactOut(from, to, amountOut, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactOut(from, to, amountOut/100 + 10_000, 0)?.gasSpent === 0) return inSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(inSingle, inSingle.amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return inSingle\n\n  const inMulti = g.findBestRouteExactOut(from, to, amountOut, bestFlowNumber)\n  return getBetterRouteExactOut(inSingle, inMulti, gasPrice)\n}\n\nexport function findSingleRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const out = g.findBestRouteExactIn(from, to, amountIn, 1)\n  return out\n}\n\nexport function findSingleRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const out = g.findBestRouteExactOut(from, to, amountOut, 1)\n  return out\n}\n\nexport function calcTokenPrices(pools: RPool[], baseToken: RToken): Map<RToken, number> {\n  const g = new Graph(pools, baseToken, 0)\n  const res = new Map<RToken, number>()\n  g.vertices.forEach(v => res.set(v.token, v.price))\n  return res\n}","import { BigNumber } from '@ethersproject/bignumber'\n\ninterface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity',\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info,\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info,\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info,\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info,\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info,\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\n","import {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n} from './MultiRouterTypes'\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { getBigNumber, revertPositive } from \"../Utils\";\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(nA.div(A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n    if (D.sub(prevD).abs().lte(1)) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION).div(nA).add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n    if (y.sub(yPrev).abs().lte(1)) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n  }\n  return -1\n}\n\nexport class OutOfLiquidity extends Error {}\n\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n"],"names":["ASSERT","f","t","console","error","closeValues","a","b","accuracy","Math","abs","calcSquareEquation","c","D","assert","sqrtD","sqrt","revertPositive","out","hint","min","max","x0","y0","e","getBigNumber","value","v","Number","MAX_SAFE_INTEGER","BigNumber","from","round","exp","floor","log","LN2","shift","mant","pow","res","mul","TYPICAL_SWAP_GAS_COST","TYPICAL_MINIMAL_LIQUIDITY","RPool","address","token0","token1","fee","reserve0","reserve1","minLiquidity","swapGasCost","updateReserves","res0","res1","ConstantProductRPool","reserve0Number","parseInt","toString","reserve1Number","calcOutByIn","amountIn","direction","x","y","gasSpent","calcInByOut","amountOut","input","inp","calcCurrentPriceWithoutFee","calcPrice","takeFeeIntoAccount","oneMinusFee","xf","calcInputByPrice","price","getLiquidity","HybridRPool","A","computeLiquidity","eq","r0","r1","isZero","s","add","nA","prevD","i","dP","div","A_PRECISION","sub","lte","computeY","yPrev","xBN","yBN","xNewBN","yNewBN","dy","lt","xI","ac4","Ds","CL_MIN_TICK","CL_MAX_TICK","CLRPool","tickSpacing","liquidity","sqrtPrice","nearestTick","ticks","length","push","index","DLiquidity","unshift","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","output","maxDx","maxDy","outBeforeFee","p","RouteStatus","Edge","v0","v1","pool","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","spentGas","spentGasNew","bestEdgeIncome","cleanTmpData","reserve","calcOutput","gas","calcInput","checkMinimalLiquidityExceededAfterSwap","testApply","inPrev","outPrev","to","getNeibour","directionNew","amountInNew","amountOutNew","inInc","outInc","inNew","outNew","calc","applySwap","bestIncome","Vertice","token","edges","gasPrice","bestTotal","bestSource","undefined","checkLine","getOutputEdges","filter","getInputEdges","Graph","pools","baseToken","vertices","tokens","Map","forEach","getOrCreateVertice","edge","baseVert","get","setPricesStable","edgeValues","addVertice","newEdges","set","sort","e1","e2","nextEdges","bestEdge","pop","vFrom","vTo","setPrices","map","r2","vert","findBestPathExactIn","_gasPrice","start","finish","processedVert","Set","nextVertList","closestVert","closestTotal","closestPosition","bestPath","path","totalOutput","splice","v2","has","newIncome","isFinite","newGasSpent","newTotal","findBestPathExactOut","totalInput","addPath","_from","every","total","totalModule","getPrimaryPriceForPath","prevToken","edgePrice","findBestRouteExactIn","mode","routeValues","Array","isArray","sum","reduce","gasSpentInit","totalrouted","primaryPrice","step","status","NoWay","fromToken","toToken","amountInBN","amountOutBN","legs","totalAmountOut","totalAmountOutBN","Partial","Success","fromVert","toVert","getRouteLegs","topologyWasChanged","calcLegsAmountOut","swapPrice","priceImpact","findBestRouteExactOut","calcLegsAmountIn","cleanTopology","n","outEdges","edgeFrom","amount","quantity","poolAddress","poolFee","tokenFrom","tokenTo","assumedAmountIn","assumedAmountOut","swapPortion","absolutePortion","amounts","l","find","inputTotal","vertNext","prevAmount","totalOutputAssumed","prevValue","outputTotal","totalAssumed","result","topologySort","removeWeakestEdge","removeDeadEnds","verts","minVert","minVertNext","minOutput","MAX_VALUE","vertState","vertsFinished","foundCycle","foundDeadEndVerts","topSortRecursive","current","state","successors2Exist","reverse","calcPriceImactWithoutFee","route","oneMinusCombinedFee","defaultFlowNumber","maxFlowNumber","calcBestFlowNumber","bestSingleRoute","gasPriceIn","bestFlowAmount","bestFlowNumber","realFlowNumber","getBetterRouteExactIn","route1","route2","findMultiRouteExactIn","flows","g","fromV","outSingle","outMulti","getBetterRouteExactOut","totalAmountIn1","totalAmountIn2","findMultiRouteExactOut","inSingle","inMulti","findSingleRouteExactIn","findSingleRouteExactOut","calcTokenPrices","PoolType","Pool","_info","info","type","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","RWeightedPool","Weighted","weight0","weight1","RConcentratedLiquidityPool","ConcentratedLiquidity","DCacheBN","HybridComputeLiquidity","HybridgetY","wPool","weightRatio","actualIn","OutOfLiquidity","Error","hPool","calcInputByPriceConstantMean","priceEffective"],"mappings":"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"}