{"code":"import { JSBI, ZERO, maximum, minimum, toElastic } from '@champagneswap/core-sdk';\r\nimport { accrue, accrueTotalAssetWithFee, interestAccrue, takeFee, computePairAddress } from '../functions';\r\nimport { toAmount, toShare } from '@champagneswap/cellar-sdk';\r\nexport class KashiMediumRiskLendingPair {\r\n    constructor(accrueInfo, collateral, asset, totalCollateralShare, totalAsset, totalBorrow, exchangeRate, oracleExchangeRate, spotExchangeRate, userCollateralShare, userAssetFraction, userBorrowPart) {\r\n        this.accrueInfo = accrueInfo;\r\n        this.collateral = collateral;\r\n        this.asset = asset;\r\n        this.totalCollateralShare = totalCollateralShare;\r\n        this.totalAsset = totalAsset;\r\n        this.totalBorrow = totalBorrow;\r\n        this.exchangeRate = exchangeRate;\r\n        this.oracleExchangeRate = oracleExchangeRate;\r\n        this.spotExchangeRate = spotExchangeRate;\r\n        this.userCollateralShare = userCollateralShare;\r\n        this.userAssetFraction = userAssetFraction;\r\n        this.userBorrowPart = userBorrowPart;\r\n    }\r\n    static getAddress(collateral, asset, oracle, oracleData) {\r\n        return computePairAddress({\r\n            collateral,\r\n            asset,\r\n            oracle,\r\n            oracleData,\r\n        });\r\n    }\r\n    /**\r\n     * Returns the number of elapsed seconds since the last accrue\r\n     */\r\n    get elapsedSeconds() {\r\n        const currentDate = JSBI.divide(JSBI.BigInt(Date.now()), JSBI.BigInt(1000));\r\n        return JSBI.subtract(currentDate, this.accrueInfo.lastAccrued);\r\n    }\r\n    /**\r\n     * Interest per year for borrowers at last accrue, this will apply during the next accrue\r\n     */\r\n    get interestPerYear() {\r\n        return JSBI.multiply(this.accrueInfo.interestPerSecond, JSBI.BigInt(60 * 60 * 24 * 365));\r\n    }\r\n    /**\r\n     * Interest per year for borrowers if accrued was called\r\n     */\r\n    get currentInterestPerYear() {\r\n        return interestAccrue(this, this.interestPerYear);\r\n    }\r\n    /**\r\n     * The total collateral in the market (collateral is stable, it doesn't accrue)\r\n     */\r\n    get totalCollateralAmount() {\r\n        return toAmount(this.collateral, this.totalCollateralShare);\r\n    }\r\n    /**\r\n     * The total assets unborrowed in the market (stable, doesn't accrue)\r\n     */\r\n    get totalAssetAmount() {\r\n        return toAmount(this.asset, this.totalAsset.elastic);\r\n    }\r\n    /**\r\n     * The total assets borrowed in the market right now\r\n     */\r\n    get currentBorrowAmount() {\r\n        return accrue(this, this.totalBorrow.elastic, true);\r\n    }\r\n    /**\r\n     * The total amount of assets, both borrowed and still available right now\r\n     */\r\n    get currentAllAssets() {\r\n        return JSBI.add(this.totalAssetAmount, this.currentBorrowAmount);\r\n    }\r\n    /**\r\n     * Current total amount of asset shares\r\n     */\r\n    get currentAllAssetShares() {\r\n        return toShare(this.asset, this.currentAllAssets);\r\n    }\r\n    /**\r\n     * Current totalAsset with the protocol fee accrued\r\n     */\r\n    get currentTotalAsset() {\r\n        return accrueTotalAssetWithFee(this);\r\n    }\r\n    /**\r\n     * The maximum amount of assets available for withdrawal or borrow\r\n     */\r\n    get maxAssetAvailable() {\r\n        return minimum(JSBI.divide(JSBI.multiply(this.totalAsset.elastic, this.currentAllAssets), this.currentAllAssetShares), toAmount(this.asset, toElastic(this.currentTotalAsset, JSBI.subtract(this.totalAsset.base, JSBI.BigInt(1000)), false)));\r\n    }\r\n    /**\r\n     * The maximum amount of assets available for withdrawal or borrow in shares\r\n     */\r\n    get maxAssetAvailableFraction() {\r\n        return JSBI.divide(JSBI.multiply(this.maxAssetAvailable, this.currentTotalAsset.base), this.currentAllAssets);\r\n    }\r\n    /**\r\n     * The overall health of the lending pair\r\n     */\r\n    get marketHealth() {\r\n        return JSBI.divide(JSBI.multiply(JSBI.divide(JSBI.multiply(this.totalCollateralAmount, JSBI.BigInt(1e18)), maximum(this.exchangeRate, this.spotExchangeRate, this.oracleExchangeRate)), JSBI.BigInt(1e18)), this.currentBorrowAmount);\r\n    }\r\n    /**\r\n     * The current utilization in %\r\n     */\r\n    get utilization() {\r\n        return JSBI.divide(JSBI.multiply(JSBI.BigInt(1e18), this.currentBorrowAmount), this.currentAllAssets);\r\n    }\r\n    /**\r\n     * Interest per year received by lenders as of now\r\n     */\r\n    get supplyAPR() {\r\n        return takeFee(JSBI.divide(JSBI.multiply(this.interestPerYear, this.utilization), JSBI.BigInt(1e18)));\r\n    }\r\n    /**\r\n     * Interest per year received by lenders if accrue was called\r\n     */\r\n    get currentSupplyAPR() {\r\n        return takeFee(JSBI.divide(JSBI.multiply(this.currentInterestPerYear, this.utilization), JSBI.BigInt(1e18)));\r\n    }\r\n    /**\r\n     * The user's amount of collateral (stable, doesn't accrue)\r\n     */\r\n    get userCollateralAmount() {\r\n        return toAmount(this.collateral, this.userCollateralShare);\r\n    }\r\n    /**\r\n     * The user's amount of assets (stable, doesn't accrue)\r\n     */\r\n    get currentUserAssetAmount() {\r\n        return JSBI.divide(JSBI.multiply(this.userAssetFraction, this.currentAllAssets), this.totalAsset.base);\r\n    }\r\n    /**\r\n     * The user's amount borrowed right now\r\n     */\r\n    get currentUserBorrowAmount() {\r\n        if (JSBI.equal(this.userBorrowPart, ZERO))\r\n            return ZERO;\r\n        return JSBI.divide(JSBI.multiply(this.userBorrowPart, this.currentBorrowAmount), this.totalBorrow.base);\r\n    }\r\n    /**\r\n     * The user's amount of assets that are currently lent\r\n     */\r\n    get currentUserLentAmount() {\r\n        return JSBI.divide(JSBI.multiply(this.userAssetFraction, this.currentBorrowAmount), this.totalAsset.base);\r\n    }\r\n    /**\r\n     * Value of protocol fees\r\n     */\r\n    get feesEarned() {\r\n        return JSBI.divide(JSBI.multiply(this.accrueInfo.feesEarnedFraction, this.currentAllAssets), this.totalAsset.base);\r\n    }\r\n    /**\r\n     * The user's maximum borrowable amount based on the collateral provided, using all three oracle values\r\n     */\r\n    get maxBorrowable() {\r\n        const max = {\r\n            oracle: JSBI.divide(JSBI.multiply(this.userCollateralAmount, JSBI.multiply(JSBI.BigInt(1e16), JSBI.BigInt(75))), this.oracleExchangeRate),\r\n            spot: JSBI.divide(JSBI.multiply(this.userCollateralAmount, JSBI.multiply(JSBI.BigInt(1e16), JSBI.BigInt(75))), this.spotExchangeRate),\r\n            stored: JSBI.divide(JSBI.multiply(this.userCollateralAmount, JSBI.multiply(JSBI.BigInt(1e16), JSBI.BigInt(75))), this.exchangeRate),\r\n        };\r\n        const min = minimum(...Object.values(max));\r\n        const safe = JSBI.subtract(JSBI.divide(JSBI.multiply(min, JSBI.BigInt(95)), JSBI.BigInt(100)), this.currentUserBorrowAmount);\r\n        const possible = minimum(safe, this.maxAssetAvailable);\r\n        return {\r\n            ...max,\r\n            minimum: min,\r\n            safe,\r\n            possible,\r\n        };\r\n    }\r\n    /**\r\n     * The user's position's health\r\n     */\r\n    get health() {\r\n        return JSBI.divide(JSBI.multiply(this.currentUserBorrowAmount, JSBI.BigInt(1e18)), this.maxBorrowable.minimum);\r\n    }\r\n}\r\n//# sourceMappingURL=KashiMediumRiskLendingPair.js.map","references":["/Users/jq/Dropbox/champagneswap-core-sdk/packages/core-sdk/dist/index.d.ts","/Users/jq/Dropbox/champagneswap-core-sdk/packages/grape-sdk/src/functions/index.ts","/Users/jq/Dropbox/champagneswap-core-sdk/packages/cellar-sdk/dist/index.d.ts","/Users/jq/Dropbox/champagneswap-core-sdk/packages/grape-sdk/src/interfaces/index.ts"],"map":"{\"version\":3,\"file\":\"KashiMediumRiskLendingPair.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/KashiMediumRiskLendingPair.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAU,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAS,MAAM,yBAAyB,CAAA;AAChG,OAAO,EAAE,MAAM,EAAE,uBAAuB,EAAE,cAAc,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAA;AAC3G,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,2BAA2B,CAAA;AAI7D,MAAM,OAAO,0BAA0B;IAuBrC,YACE,UAAsB,EACtB,UAAkB,EAClB,KAAa,EACb,oBAA0B,EAC1B,UAAkB,EAClB,WAAmB,EACnB,YAAkB,EAClB,kBAAwB,EACxB,gBAAsB,EACtB,mBAAyB,EACzB,iBAAuB,EACvB,cAAoB;QAEpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAA;QAChD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;QAChC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAA;QAC5C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAA;QAC9C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAA;QAC1C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAA;IACtC,CAAC;IAnCM,MAAM,CAAC,UAAU,CAAC,UAAiB,EAAE,KAAY,EAAE,MAAc,EAAE,UAAkB;QAC1F,OAAO,kBAAkB,CAAC;YACxB,UAAU;YACV,KAAK;YACL,MAAM;YACN,UAAU;SACX,CAAC,CAAA;IACJ,CAAC;IA8BD;;OAEG;IACH,IAAW,cAAc;QACvB,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;QAC3E,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAA;IAChE,CAAC;IAED;;OAEG;IACH,IAAW,eAAe;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;IAC1F,CAAC;IAED;;OAEG;IACH,IAAW,sBAAsB;QAC/B,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAA;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,qBAAqB;QAC9B,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAA;IAC7D,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACzB,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;IACtD,CAAC;IAED;;OAEG;IACH,IAAW,mBAAmB;QAC5B,OAAO,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAA;IAClE,CAAC;IAED;;OAEG;IACH,IAAW,qBAAqB;QAC9B,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAA;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB;QAC1B,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA;IACtC,CAAC;IAED;;OAEG;IACH,IAAW,iBAAiB;QAC1B,OAAO,OAAO,CACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,EACtG,QAAQ,CACN,IAAI,CAAC,KAAK,EACV,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CACjG,CACF,CAAA;IACH,CAAC;IAED;;OAEG;IACH,IAAW,yBAAyB;QAClC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAA;IAC/G,CAAC;IAED;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,MAAM,CAChB,IAAI,CAAC,QAAQ,CACX,IAAI,CAAC,MAAM,CACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC5D,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAC3E,EACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAClB,EACD,IAAI,CAAC,mBAAmB,CACzB,CAAA;IACH,CAAC;IAED;;OAEG;IACH,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAA;IACvG,CAAC;IAED;;OAEG;IACH,IAAW,SAAS;QAClB,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACvG,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACzB,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC9G,CAAC;IAED;;OAEG;IACH,IAAW,oBAAoB;QAC7B,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAA;IAC5D,CAAC;IAED;;OAEG;IACH,IAAW,sBAAsB;QAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IACxG,CAAC;IAED;;OAEG;IACH,IAAW,uBAAuB;QAChC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC;YAAE,OAAO,IAAI,CAAA;QACtD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;IACzG,CAAC;IAED;;OAEG;IACH,IAAW,qBAAqB;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IAC3G,CAAC;IAED;;OAEG;IACH,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IACpH,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACtB,MAAM,GAAG,GAAG;YACV,MAAM,EAAE,IAAI,CAAC,MAAM,CACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,EAC3F,IAAI,CAAC,kBAAkB,CACxB;YACD,IAAI,EAAE,IAAI,CAAC,MAAM,CACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,EAC3F,IAAI,CAAC,gBAAgB,CACtB;YACD,MAAM,EAAE,IAAI,CAAC,MAAM,CACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,EAC3F,IAAI,CAAC,YAAY,CAClB;SACF,CAAA;QAED,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;QAE1C,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAClE,IAAI,CAAC,uBAAuB,CAC7B,CAAA;QAED,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAA;QAEtD,OAAO;YACL,GAAG,GAAG;YACN,OAAO,EAAE,GAAG;YACZ,IAAI;YACJ,QAAQ;SACT,CAAA;IACH,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;IAChH,CAAC;CACF\"}","dts":{"name":"/Users/jq/Dropbox/champagneswap-core-sdk/packages/grape-sdk/entities/KashiMediumRiskLendingPair.d.ts","writeByteOrderMark":false,"text":"import { JSBI, Rebase, Token } from '@champagneswap/core-sdk';\r\nimport { AccrueInfo } from '../interfaces';\r\nexport declare class KashiMediumRiskLendingPair {\r\n    readonly accrueInfo: AccrueInfo;\r\n    readonly collateral: Rebase;\r\n    readonly asset: Rebase;\r\n    readonly totalCollateralShare: JSBI;\r\n    readonly totalAsset: Rebase;\r\n    readonly totalBorrow: Rebase;\r\n    readonly exchangeRate: JSBI;\r\n    readonly oracleExchangeRate: JSBI;\r\n    readonly spotExchangeRate: JSBI;\r\n    readonly userCollateralShare: JSBI;\r\n    readonly userAssetFraction: JSBI;\r\n    readonly userBorrowPart: JSBI;\r\n    static getAddress(collateral: Token, asset: Token, oracle: string, oracleData: string): string;\r\n    constructor(accrueInfo: AccrueInfo, collateral: Rebase, asset: Rebase, totalCollateralShare: JSBI, totalAsset: Rebase, totalBorrow: Rebase, exchangeRate: JSBI, oracleExchangeRate: JSBI, spotExchangeRate: JSBI, userCollateralShare: JSBI, userAssetFraction: JSBI, userBorrowPart: JSBI);\r\n    /**\r\n     * Returns the number of elapsed seconds since the last accrue\r\n     */\r\n    get elapsedSeconds(): JSBI;\r\n    /**\r\n     * Interest per year for borrowers at last accrue, this will apply during the next accrue\r\n     */\r\n    get interestPerYear(): JSBI;\r\n    /**\r\n     * Interest per year for borrowers if accrued was called\r\n     */\r\n    get currentInterestPerYear(): JSBI;\r\n    /**\r\n     * The total collateral in the market (collateral is stable, it doesn't accrue)\r\n     */\r\n    get totalCollateralAmount(): JSBI;\r\n    /**\r\n     * The total assets unborrowed in the market (stable, doesn't accrue)\r\n     */\r\n    get totalAssetAmount(): JSBI;\r\n    /**\r\n     * The total assets borrowed in the market right now\r\n     */\r\n    get currentBorrowAmount(): JSBI;\r\n    /**\r\n     * The total amount of assets, both borrowed and still available right now\r\n     */\r\n    get currentAllAssets(): JSBI;\r\n    /**\r\n     * Current total amount of asset shares\r\n     */\r\n    get currentAllAssetShares(): JSBI;\r\n    /**\r\n     * Current totalAsset with the protocol fee accrued\r\n     */\r\n    get currentTotalAsset(): {\r\n        elastic: JSBI;\r\n        base: JSBI;\r\n    };\r\n    /**\r\n     * The maximum amount of assets available for withdrawal or borrow\r\n     */\r\n    get maxAssetAvailable(): JSBI;\r\n    /**\r\n     * The maximum amount of assets available for withdrawal or borrow in shares\r\n     */\r\n    get maxAssetAvailableFraction(): JSBI;\r\n    /**\r\n     * The overall health of the lending pair\r\n     */\r\n    get marketHealth(): JSBI;\r\n    /**\r\n     * The current utilization in %\r\n     */\r\n    get utilization(): JSBI;\r\n    /**\r\n     * Interest per year received by lenders as of now\r\n     */\r\n    get supplyAPR(): JSBI;\r\n    /**\r\n     * Interest per year received by lenders if accrue was called\r\n     */\r\n    get currentSupplyAPR(): JSBI;\r\n    /**\r\n     * The user's amount of collateral (stable, doesn't accrue)\r\n     */\r\n    get userCollateralAmount(): JSBI;\r\n    /**\r\n     * The user's amount of assets (stable, doesn't accrue)\r\n     */\r\n    get currentUserAssetAmount(): JSBI;\r\n    /**\r\n     * The user's amount borrowed right now\r\n     */\r\n    get currentUserBorrowAmount(): JSBI;\r\n    /**\r\n     * The user's amount of assets that are currently lent\r\n     */\r\n    get currentUserLentAmount(): JSBI;\r\n    /**\r\n     * Value of protocol fees\r\n     */\r\n    get feesEarned(): JSBI;\r\n    /**\r\n     * The user's maximum borrowable amount based on the collateral provided, using all three oracle values\r\n     */\r\n    get maxBorrowable(): {\r\n        minimum: JSBI;\r\n        safe: JSBI;\r\n        possible: JSBI;\r\n        oracle: JSBI;\r\n        spot: JSBI;\r\n        stored: JSBI;\r\n    };\r\n    /**\r\n     * The user's position's health\r\n     */\r\n    get health(): JSBI;\r\n}\r\n"}}
