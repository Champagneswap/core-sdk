/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MigratorInterface extends ethers.utils.Interface {
  functions: {
    "bento()": FunctionFragment;
    "constantProductPoolFactory()": FunctionFragment;
    "masterChef()": FunctionFragment;
    "masterDeployer()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "migrated(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "constantProductPoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(functionFragment: "migrated", values: [string]): string;

  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "constantProductPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrated", data: BytesLike): Result;

  events: {
    "Migrate(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
}

export class Migrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MigratorInterface;

  functions: {
    bento(overrides?: CallOverrides): Promise<[string]>;

    constantProductPoolFactory(overrides?: CallOverrides): Promise<[string]>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      oldPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrated(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  bento(overrides?: CallOverrides): Promise<string>;

  constantProductPoolFactory(overrides?: CallOverrides): Promise<string>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  migrate(
    oldPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrated(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bento(overrides?: CallOverrides): Promise<string>;

    constantProductPoolFactory(overrides?: CallOverrides): Promise<string>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;

    migrate(oldPool: string, overrides?: CallOverrides): Promise<string>;

    migrated(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Migrate(
      oldPool?: string | null,
      newPool?: string | null,
      intermediaryToken?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { oldPool: string; newPool: string; intermediaryToken: string }
    >;
  };

  estimateGas: {
    bento(overrides?: CallOverrides): Promise<BigNumber>;

    constantProductPoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      oldPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    constantProductPoolFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      oldPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
