/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ConcentratedLiquidityPoolStakerInterface
  extends ethers.utils.Interface {
  functions: {
    "addIncentive(address,tuple)": FunctionFragment;
    "bento()": FunctionFragment;
    "claimRewards(uint256,uint256[],address,bool)": FunctionFragment;
    "getReward(uint256,uint256)": FunctionFragment;
    "incentiveCount(address)": FunctionFragment;
    "incentives(address,uint256)": FunctionFragment;
    "poolManager()": FunctionFragment;
    "rangeSecondsInside(address,int24,int24)": FunctionFragment;
    "reclaimIncentive(address,uint256,address,uint96,bool)": FunctionFragment;
    "stakes(uint256,uint256)": FunctionFragment;
    "subscribe(uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addIncentive",
    values: [
      string,
      {
        owner: string;
        token: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
        expiry: BigNumberish;
        secondsClaimed: BigNumberish;
        rewardsUnclaimed: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BigNumberish[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentives",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rangeSecondsInside",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimIncentive",
    values: [string, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentiveCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incentives", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeSecondsInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;

  events: {
    "AddIncentive(address,uint256,address)": EventFragment;
    "ClaimReward(uint256,uint256,address,uint96)": EventFragment;
    "ReclaimIncentive(address,uint256,uint256)": EventFragment;
    "Subscribe(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReclaimIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribe"): EventFragment;
}

export class ConcentratedLiquidityPoolStaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConcentratedLiquidityPoolStakerInterface;

  functions: {
    addIncentive(
      pool: string,
      incentive: {
        owner: string;
        token: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
        expiry: BigNumberish;
        secondsClaimed: BigNumberish;
        rewardsUnclaimed: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bento(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      positionId: BigNumberish,
      incentiveIds: BigNumberish[],
      recipient: string,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(
      positionId: BigNumberish,
      incentiveId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rewards: BigNumber; secondsInside: BigNumber }
    >;

    incentiveCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incentives(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number, BigNumber, BigNumber] & {
        owner: string;
        token: string;
        startTime: number;
        endTime: number;
        expiry: number;
        secondsClaimed: BigNumber;
        rewardsUnclaimed: BigNumber;
      }
    >;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    rangeSecondsInside(
      pool: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { secondsInside: BigNumber }>;

    reclaimIncentive(
      pool: string,
      incentiveId: BigNumberish,
      receiver: string,
      amount: BigNumberish,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        secondsGrowthInsideLast: BigNumber;
        timestamp: number;
      }
    >;

    subscribe(
      positionId: BigNumberish,
      incentiveId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addIncentive(
    pool: string,
    incentive: {
      owner: string;
      token: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
      expiry: BigNumberish;
      secondsClaimed: BigNumberish;
      rewardsUnclaimed: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bento(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    positionId: BigNumberish,
    incentiveIds: BigNumberish[],
    recipient: string,
    unwrapBento: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(
    positionId: BigNumberish,
    incentiveId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rewards: BigNumber; secondsInside: BigNumber }
  >;

  incentiveCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  incentives(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, number, BigNumber, BigNumber] & {
      owner: string;
      token: string;
      startTime: number;
      endTime: number;
      expiry: number;
      secondsClaimed: BigNumber;
      rewardsUnclaimed: BigNumber;
    }
  >;

  poolManager(overrides?: CallOverrides): Promise<string>;

  rangeSecondsInside(
    pool: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reclaimIncentive(
    pool: string,
    incentiveId: BigNumberish,
    receiver: string,
    amount: BigNumberish,
    unwrapBento: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      secondsGrowthInsideLast: BigNumber;
      timestamp: number;
    }
  >;

  subscribe(
    positionId: BigNumberish,
    incentiveId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addIncentive(
      pool: string,
      incentive: {
        owner: string;
        token: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
        expiry: BigNumberish;
        secondsClaimed: BigNumberish;
        rewardsUnclaimed: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    bento(overrides?: CallOverrides): Promise<string>;

    claimRewards(
      positionId: BigNumberish,
      incentiveIds: BigNumberish[],
      recipient: string,
      unwrapBento: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getReward(
      positionId: BigNumberish,
      incentiveId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rewards: BigNumber; secondsInside: BigNumber }
    >;

    incentiveCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    incentives(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number, BigNumber, BigNumber] & {
        owner: string;
        token: string;
        startTime: number;
        endTime: number;
        expiry: number;
        secondsClaimed: BigNumber;
        rewardsUnclaimed: BigNumber;
      }
    >;

    poolManager(overrides?: CallOverrides): Promise<string>;

    rangeSecondsInside(
      pool: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reclaimIncentive(
      pool: string,
      incentiveId: BigNumberish,
      receiver: string,
      amount: BigNumberish,
      unwrapBento: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        secondsGrowthInsideLast: BigNumber;
        timestamp: number;
      }
    >;

    subscribe(
      positionId: BigNumberish,
      incentiveId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddIncentive(
      pool?: string | null,
      incentiveId?: BigNumberish | null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { pool: string; incentiveId: BigNumber; rewardToken: string }
    >;

    ClaimReward(
      positionId?: BigNumberish | null,
      incentiveId?: BigNumberish | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        positionId: BigNumber;
        incentiveId: BigNumber;
        recipient: string;
        amount: BigNumber;
      }
    >;

    ReclaimIncentive(
      pool?: string | null,
      incentiveId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { pool: string; incentiveId: BigNumber; amount: BigNumber }
    >;

    Subscribe(
      positionId?: BigNumberish | null,
      incentiveId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { positionId: BigNumber; incentiveId: BigNumber }
    >;
  };

  estimateGas: {
    addIncentive(
      pool: string,
      incentive: {
        owner: string;
        token: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
        expiry: BigNumberish;
        secondsClaimed: BigNumberish;
        rewardsUnclaimed: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bento(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      positionId: BigNumberish,
      incentiveIds: BigNumberish[],
      recipient: string,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(
      positionId: BigNumberish,
      incentiveId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    incentives(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    rangeSecondsInside(
      pool: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reclaimIncentive(
      pool: string,
      incentiveId: BigNumberish,
      receiver: string,
      amount: BigNumberish,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(
      positionId: BigNumberish,
      incentiveId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addIncentive(
      pool: string,
      incentive: {
        owner: string;
        token: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
        expiry: BigNumberish;
        secondsClaimed: BigNumberish;
        rewardsUnclaimed: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      positionId: BigNumberish,
      incentiveIds: BigNumberish[],
      recipient: string,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(
      positionId: BigNumberish,
      incentiveId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentives(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rangeSecondsInside(
      pool: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reclaimIncentive(
      pool: string,
      incentiveId: BigNumberish,
      receiver: string,
      amount: BigNumberish,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      positionId: BigNumberish,
      incentiveId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
