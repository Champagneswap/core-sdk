/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  ITridentRouterMinimal,
  ITridentRouterMinimalInterface,
} from "../ITridentRouterMinimal";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "bool",
            name: "native",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ITridentRouterMinimal.TokenInput[]",
        name: "tokenInput",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minLiquidity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

export class ITridentRouterMinimal__factory {
  static readonly abi = _abi;
  static createInterface(): ITridentRouterMinimalInterface {
    return new utils.Interface(_abi) as ITridentRouterMinimalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITridentRouterMinimal {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITridentRouterMinimal;
  }
}
